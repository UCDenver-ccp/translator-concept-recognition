name: CI/CD CRF containers & models

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCE_PROJECT }}
  GCS_SERVICE_ACCOUNT: ${{ secrets.GCE_SA_KEY }}
  GCE_REGION: us-central1

jobs:
  # ci:
  #   name: Java CI 
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up JDK 8
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: '8'
  #         distribution: 'adopt'
  #     - name: Cache Maven packages
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.m2
  #         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-m2
  #     - name: Build with Maven
  #       run: mvn --batch-mode --update-snapshots verify --file code/java/crf-utility/pom.xml

  # check-need-to-build-crf-model-ncbi-disease:
  #   continue-on-error: true # the skip-ncbi-disease step checks to see if 'ncbi-disease' or 'src' 
  #   # are part of the file names that have been modified. If they are not, the script return 1. 
  #   # The continue-on-error flag is set to true so that the action itself doesn't fail when the 
  #   # script returns a non-zero code.
  #   runs-on: ubuntu-latest
  #   # needs: ci
  #   outputs:
  #     status: ${{ steps.skip-ncbi-disease.conclusion }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - id: ncbi-disease_file_changes
  #       uses: trilom/file-changes-action@v1.2.4
  #       with: 
  #         githubToken: ${{ secrets.GITHUB_TOKEN }}
  #     - id: skip-ncbi-disease
  #       run: sh -c ".github/workflows/file-contains.sh yaml $HOME/files_modified.json"

  # build-and-publish-crf-model-ncbi-disease:
  #   runs-on: ubuntu-latest
  #   needs: check-need-to-build-crf-model-ncbi-disease
  #   if: needs.check-need-to-build-crf-model-ncbi-disease.outputs.status == 'success'
  #   name: Build & publish Disease CRF model
  #   env:
  #     IMAGE_NAME: build-crf-model-ncbi-disease
  #     DOCKERFILE: build-crf-models/ncbi-disease.crf.Dockerfile
  #     GCE_REGION: us-central1
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@master
  #       with:
  #         project_id: ${{ secrets.GCE_PROJECT }}
  #         service_account_key: ${{ secrets.GCE_SA_KEY }}
  #         version: '290.0.1'
  #     - name: Configure Docker Authentication
  #       run: gcloud --quiet auth configure-docker
  #     - name: Set MODEL_VERSION env
  #       run: echo "MODEL_VERSION=$(grep 'DISEASE.NCBIDISEASE' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
  #     - name: Build Docker Image
  #       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
  #     - name: Publish Docker Image to Google Container Registry
  #       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
  #     - name: Submit job to build model to AI-Platform
  #       run: |-
  #         gcloud ai-platform jobs submit training "build_ncbi_disease_crf_$GITHUB_SHA" \
  #           --scale-tier basic --region "$GCE_REGION" \
  #           --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
  #     - name: Monitor the training job
  #       run: sh -c ".github/workflows/monitor-ai-platform-job.sh build_ncbi_disease_crf_$GITHUB_SHA"
       

  build-crf-service-container-ncbi-disease:
    runs-on: ubuntu-latest
    # needs: build-and-publish-crf-model-ncbi-disease
    name: Build container to host NCBI Disease CRF service
    env:
      IMAGE_NAME: crf-service-ncbi-disease
      ENV_FILE: build-crf-services/ncbi-disease.env
      DOCKERFILE: build-crf-services/crf-service.Dockerfile
      GCE_REGION: us-central1
    steps:
      - uses: actions/checkout@v2
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCE_PROJECT }}
          service_account_key: ${{ secrets.GCE_SA_KEY }}
          version: '290.0.1'
      - name: Configure Docker Authentication
        run: gcloud --quiet auth configure-docker
      - name: Set MODEL_VERSION env
        run: echo "MODEL_VERSION=$(grep 'DISEASE.NCBIDISEASE' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
      - name: Set model-specific environment variables
        run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
      - name: Output envs 1
        run: echo "MODEL_FILE_PREFIX -- $MODEL_FILE_PREFIX"
      - name: Output envs 2
        run: echo "MODEL_KEY -- $MODEL_KEY"
      - name: Output envs 3
        run: echo "MODEL_VERSION -- $MODEL_VERSION"
      - name: Build Docker Image
        run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
      - name: Publish Docker Image to Google Container Registry
        run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"

  # test-gsutil:
  #   runs-on: ubuntu-latest
  #   needs: check-ncbi-disease
  #   if: needs.check-ncbi-disease.outputs.status == 'success'
  #   name: Test gsutil
  #   env:
  #     IMAGE_NAME: test-gsutil
  #     DOCKERFILE: build-crf-models/gsutil-test.Dockerfile
  #     GCE_MACHINE_TYPE: n1-highmem-16
  #     GCE_REGION: us-central1
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@master
  #       with:
  #         project_id: ${{ secrets.GCE_PROJECT }}
  #         service_account_key: ${{ secrets.GCE_SA_KEY }}
  #         version: '290.0.1'
  #     - name: Configure Docker Authentication
  #       run: gcloud --quiet auth configure-docker
  #     - name: Set MODEL_VERSION env
  #       run: echo "MODEL_VERSION=$(grep 'DISEASE.NCBIDISEASE' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
  #     - name: Build Docker Image
  #       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
  #     - name: Publish Docker Image to Google Container Registry
  #       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
  #     - name: Submit job to build model to AI-Platform
  #       run: |-
  #         gcloud ai-platform jobs submit training "test_gsutil_$GITHUB_SHA" \
  #           --scale-tier basic --region "$GCE_REGION" \
  #           --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"

       