name: CI/CD CRF containers & models

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCE_PROJECT }}
  GCS_SERVICE_ACCOUNT: ${{ secrets.GCE_SA_KEY }}
  GCE_REGION: us-central1

jobs:
  # ci:
  #   name: Java CI 
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up JDK 8
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: '8'
  #         distribution: 'adopt'
  #     - name: Cache Maven packages
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.m2
  #         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-m2
  #     - name: Build with Maven
  #       run: mvn --batch-mode --update-snapshots verify --file code/java/crf-utility/pom.xml

  # check-need-to-build-crf-model-ncbi-disease:
  #   continue-on-error: true # the skip-ncbi-disease step checks to see if 'ncbi-disease' or 'src' 
  #   # are part of the file names that have been modified. If they are not, the script return 1. 
  #   # The continue-on-error flag is set to true so that the action itself doesn't fail when the 
  #   # script returns a non-zero code.
  #   runs-on: ubuntu-latest
  #   # needs: ci
  #   outputs:
  #     status: ${{ steps.skip-ncbi-disease.conclusion }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - id: ncbi-disease_file_changes
  #       uses: trilom/file-changes-action@v1.2.4
  #       with: 
  #         githubToken: ${{ secrets.GITHUB_TOKEN }}
  #     - id: skip-ncbi-disease
  #       run: sh -c ".github/workflows/file-contains.sh yaml $HOME/files_modified.json"

  # build-and-publish-crf-model-ncbi-disease:
  #   runs-on: ubuntu-latest
  #   # needs: ci
  #   # if: needs.check-need-to-build-crf-model-ncbi-disease.outputs.status == 'success'
  #   name: Build & publish Disease CRF model
  #   env:
  #     IMAGE_NAME: build_crf_model_ncbi_disease
  #     DOCKERFILE: build-crf-models/ncbi-disease.crf.Dockerfile
  #     GCE_REGION: us-central1
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@master
  #       with:
  #         project_id: ${{ secrets.GCE_PROJECT }}
  #         service_account_key: ${{ secrets.GCE_SA_KEY }}
  #         version: '290.0.1'
  #     - name: Configure Docker Authentication
  #       run: gcloud --quiet auth configure-docker
  #     - name: Set MODEL_VERSION env
  #       run: echo "MODEL_VERSION=$(grep 'DISEASE.NCBIDISEASE' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
  #     - name: Build Docker Image
  #       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
  #     - name: Publish Docker Image to Google Container Registry
  #       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
  #     - name: Submit job to build model to AI-Platform
  #       run: |-
  #         gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
  #           --scale-tier basic --region "$GCE_REGION" \
  #           --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
  #     - name: Monitor the training job
  #       run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
       

  # build-crf-service-container-ncbi-disease:
  #   runs-on: ubuntu-latest
  #   needs: build-and-publish-crf-model-ncbi-disease
  #   name: Build container to host NCBI Disease CRF service
  #   env:
  #     IMAGE_NAME: crf_service_ncbi_disease
  #     ENV_FILE: build-crf-services/ncbi-disease.env
  #     DOCKERFILE: build-crf-services/crf-service.Dockerfile
  #     GCE_REGION: us-central1
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@master
  #       with:
  #         project_id: ${{ secrets.GCE_PROJECT }}
  #         service_account_key: ${{ secrets.GCE_SA_KEY }}
  #         version: '290.0.1'
  #     - name: Configure Docker Authentication
  #       run: gcloud --quiet auth configure-docker
  #     - name: Set MODEL_VERSION env
  #       run: echo "MODEL_VERSION=$(grep 'DISEASE.NCBIDISEASE' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
  #     - name: Set model-specific environment variables
  #       run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
  #    # - name: Output envs 1
  #    #   run: echo "MODEL_FILE_PREFIX -- $MODEL_FILE_PREFIX"
  #    # - name: Output envs 2
  #    #   run: echo "MODEL_KEY -- $MODEL_KEY"
  #    # - name: Output envs 3
  #    #   run: echo "MODEL_VERSION -- $MODEL_VERSION"
  #     - name: Build Docker Image
  #       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
  #     - name: Publish Docker Image to Google Container Registry
  #       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"



  # build-and-publish-crf-model-nlm-chem:
  #   runs-on: ubuntu-latest
  #   # needs: ci
  #   # if: needs.check-need-to-build-crf-model-nlm-chem.outputs.status == 'success'
  #   name: Build & publish Chemical CRF model
  #   env:
  #     IMAGE_NAME: build_crf_model_nlm_chem
  #     DOCKERFILE: build-crf-models/nlm-chem.crf.Dockerfile
  #     GCE_REGION: us-central1
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@master
  #       with:
  #         project_id: ${{ secrets.GCE_PROJECT }}
  #         service_account_key: ${{ secrets.GCE_SA_KEY }}
  #         version: '290.0.1'
  #     - name: Configure Docker Authentication
  #       run: gcloud --quiet auth configure-docker
  #     - name: Set MODEL_VERSION env
  #       run: echo "MODEL_VERSION=$(grep 'CHEMICAL.NLMCHEM' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
  #     - name: Build Docker Image
  #       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
  #     - name: Publish Docker Image to Google Container Registry
  #       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
  #     - name: Submit job to build model to AI-Platform
  #       run: |-
  #         gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
  #           --scale-tier basic --region "$GCE_REGION" \
  #           --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
  #     - name: Monitor the training job
  #       run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
       

  # build-crf-service-container-nlm-chem:
  #   runs-on: ubuntu-latest
  #   needs: build-and-publish-crf-model-nlm-chem
  #   name: Build container to host NLM-Chem CRF service
  #   env:
  #     IMAGE_NAME: crf_service_nlm_chem
  #     ENV_FILE: build-crf-services/nlm-chem.env
  #     DOCKERFILE: build-crf-services/crf-service.Dockerfile
  #     GCE_REGION: us-central1
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@master
  #       with:
  #         project_id: ${{ secrets.GCE_PROJECT }}
  #         service_account_key: ${{ secrets.GCE_SA_KEY }}
  #         version: '290.0.1'
  #     - name: Configure Docker Authentication
  #       run: gcloud --quiet auth configure-docker
  #     - name: Set MODEL_VERSION env
  #       run: echo "MODEL_VERSION=$(grep 'CHEMICAL.NLMCHEM' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
  #     - name: Set model-specific environment variables
  #       run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
  #     - name: Build Docker Image
  #       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
  #     - name: Publish Docker Image to Google Container Registry
  #       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"


  build-and-publish-crf-model-human-phenotype:
    runs-on: ubuntu-latest
    # needs: ci
    # if: needs.check-need-to-build-crf-model-human-phenotype.outputs.status == 'success'
    name: Build & publish Human Phenotype CRF model
    env:
      IMAGE_NAME: build_crf_model_human_phenotype
      DOCKERFILE: build-crf-models/human-phenotype.crf.Dockerfile
      GCE_REGION: us-central1
    steps:
      - uses: actions/checkout@v2
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCE_PROJECT }}
          service_account_key: ${{ secrets.GCE_SA_KEY }}
          version: '290.0.1'
      - name: Configure Docker Authentication
        run: gcloud --quiet auth configure-docker
      - name: Set MODEL_VERSION env
        run: echo "MODEL_VERSION=$(grep 'PHENOTYPE.HPO' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
      # - name: Build Docker Image
      #   run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
      # - name: Publish Docker Image to Google Container Registry
      #   run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
      - name: Output envs 1
        run: echo "IMAGE_NAME -- $IMAGE_NAME"
      - name: Output envs 2
        run: echo "GITHUB_SHA -- $GITHUB_SHA"
      - name: Submit job to build model to AI-Platform
        run: |-
          gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
            --scale-tier basic --region "$GCE_REGION" \
            --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
      - name: Monitor the training job
        run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
        

  build-crf-service-container-human-phenotype:
    runs-on: ubuntu-latest
    needs: build-and-publish-crf-model-human-phenotype
    name: Build container to host human-phenotype CRF service
    env:
      IMAGE_NAME: crf_service_human_phenotype
      ENV_FILE: build-crf-services/human-phenotype.env
      DOCKERFILE: build-crf-services/crf-service.Dockerfile
      GCE_REGION: us-central1
    steps:
      - uses: actions/checkout@v2
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCE_PROJECT }}
          service_account_key: ${{ secrets.GCE_SA_KEY }}
          version: '290.0.1'
      - name: Configure Docker Authentication
        run: gcloud --quiet auth configure-docker
      - name: Set MODEL_VERSION env
        run: echo "MODEL_VERSION=$(grep 'PHENOTYPE.HPO' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
      - name: Set model-specific environment variables
        run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
      - name: Build Docker Image
        run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
      - name: Publish Docker Image to Google Container Registry
        run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
  

#   # CHEBI
#   build-and-publish-crf-model-craft-chebi:
#     runs-on: ubuntu-latest
#     # needs: ci
#     # if: needs.check-need-to-build-crf-model-craft-chebi.outputs.status == 'success'
#     name: Build & publish CRAFT CHEBI CRF model
#     env:
#       ONT: CHEBI
#       IMAGE_NAME: build_crf_model_craft_chebi
#       DOCKERFILE: build-crf-models/craft.crf.Dockerfile
#       GCE_REGION: us-central1
#     steps:
#       - uses: actions/checkout@v2
#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@master
#         with:
#           project_id: ${{ secrets.GCE_PROJECT }}
#           service_account_key: ${{ secrets.GCE_SA_KEY }}
#           version: '290.0.1'
#       - name: Configure Docker Authentication
#         run: gcloud --quiet auth configure-docker
#       - name: Set MODEL_VERSION env
#         run: echo "MODEL_VERSION=$(grep 'CHEBI.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#       - name: Build Docker Image
#         run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
#       - name: Publish Docker Image to Google Container Registry
#         run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
#       - name: Submit job to build model to AI-Platform
#         run: |-
#           gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
#             --scale-tier basic --region "$GCE_REGION" \
#             --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" \
#             -- "${ONT}"
#       - name: Monitor the training job
#         run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
        

#   build-crf-service-container-craft-chebi:
#     runs-on: ubuntu-latest
#     needs: build-and-publish-crf-model-craft-chebi
#     name: Build container to host craft-chebi CRF service
#     env:
#       IMAGE_NAME: crf_service_craft_chebi
#       ENV_FILE: build-crf-services/craft-chebi.env
#       DOCKERFILE: build-crf-services/crf-service.Dockerfile
#       GCE_REGION: us-central1
#     steps:
#       - uses: actions/checkout@v2
#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@master
#         with:
#           project_id: ${{ secrets.GCE_PROJECT }}
#           service_account_key: ${{ secrets.GCE_SA_KEY }}
#           version: '290.0.1'
#       - name: Configure Docker Authentication
#         run: gcloud --quiet auth configure-docker
#       - name: Set MODEL_VERSION env
#         run: echo "MODEL_VERSION=$(grep 'CHEBI.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#       - name: Set model-specific environment variables
#         run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
#       - name: Build Docker Image
#         run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
#       - name: Publish Docker Image to Google Container Registry
#         run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"




# # CL
# build-and-publish-crf-model-craft-cl:
#     runs-on: ubuntu-latest
#     # needs: ci
#     # if: needs.check-need-to-build-crf-model-craft-cl.outputs.status == 'success'
#     name: Build & publish CRAFT CL CRF model
#     env:
#       ONT: CL
#       IMAGE_NAME: build_crf_model_craft_cl
#       DOCKERFILE: build-crf-models/craft.crf.Dockerfile
#       GCE_REGION: us-central1
#     steps:
#       - uses: actions/checkout@v2
#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@master
#         with:
#           project_id: ${{ secrets.GCE_PROJECT }}
#           service_account_key: ${{ secrets.GCE_SA_KEY }}
#           version: '290.0.1'
#       - name: Configure Docker Authentication
#         run: gcloud --quiet auth configure-docker
#       - name: Set MODEL_VERSION env
#         run: echo "MODEL_VERSION=$(grep 'CL.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#       - name: Build Docker Image
#         run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
#       - name: Publish Docker Image to Google Container Registry
#         run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
#       - name: Submit job to build model to AI-Platform
#         run: |-
#           gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
#             --scale-tier basic --region "$GCE_REGION" \
#             --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" \
#             -- "${ONT}"
#       - name: Monitor the training job
#         run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
        

# build-crf-service-container-craft-cl:
#   runs-on: ubuntu-latest
#   needs: build-and-publish-crf-model-craft-cl
#   name: Build container to host craft-cl CRF service
#   env:
#     IMAGE_NAME: crf_service_craft_cl
#     ENV_FILE: build-crf-services/craft-cl.env
#     DOCKERFILE: build-crf-services/crf-service.Dockerfile
#     GCE_REGION: us-central1
#   steps:
#     - uses: actions/checkout@v2
#     - name: Set up Cloud SDK
#       uses: google-github-actions/setup-gcloud@master
#       with:
#         project_id: ${{ secrets.GCE_PROJECT }}
#         service_account_key: ${{ secrets.GCE_SA_KEY }}
#         version: '290.0.1'
#     - name: Configure Docker Authentication
#       run: gcloud --quiet auth configure-docker
#     - name: Set MODEL_VERSION env
#       run: echo "MODEL_VERSION=$(grep 'CL.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#     - name: Set model-specific environment variables
#       run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
#     - name: Build Docker Image
#       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
#     - name: Publish Docker Image to Google Container Registry
#       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"



# # GO_BP
# build-and-publish-crf-model-craft-go_bp:
#   runs-on: ubuntu-latest
#   # needs: ci
#   # if: needs.check-need-to-build-crf-model-craft-go_bp.outputs.status == 'success'
#   name: Build & publish CRAFT GO_BP CRF model
#   env:
#     ONT: GO_BP
#     IMAGE_NAME: build_crf_model_craft_go_bp
#     DOCKERFILE: build-crf-models/craft.crf.Dockerfile
#     GCE_REGION: us-central1
#   steps:
#     - uses: actions/checkout@v2
#     - name: Set up Cloud SDK
#       uses: google-github-actions/setup-gcloud@master
#       with:
#         project_id: ${{ secrets.GCE_PROJECT }}
#         service_account_key: ${{ secrets.GCE_SA_KEY }}
#         version: '290.0.1'
#     - name: Configure Docker Authentication
#       run: gcloud --quiet auth configure-docker
#     - name: Set MODEL_VERSION env
#       run: echo "MODEL_VERSION=$(grep 'GO_BP.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#     - name: Build Docker Image
#       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
#     - name: Publish Docker Image to Google Container Registry
#       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
#     - name: Submit job to build model to AI-Platform
#       run: |-
#         gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
#           --scale-tier basic --region "$GCE_REGION" \
#           --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" \
#           -- "${ONT}"
#     - name: Monitor the training job
#       run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
      

# build-crf-service-container-craft-go_bp:
# runs-on: ubuntu-latest
# needs: build-and-publish-crf-model-craft-go_bp
# name: Build container to host craft-go_bp CRF service
# env:
#   IMAGE_NAME: crf_service_craft_go_bp
#   ENV_FILE: build-crf-services/craft-go_bp.env
#   DOCKERFILE: build-crf-services/crf-service.Dockerfile
#   GCE_REGION: us-central1
# steps:
#   - uses: actions/checkout@v2
#   - name: Set up Cloud SDK
#     uses: google-github-actions/setup-gcloud@master
#     with:
#       project_id: ${{ secrets.GCE_PROJECT }}
#       service_account_key: ${{ secrets.GCE_SA_KEY }}
#       version: '290.0.1'
#   - name: Configure Docker Authentication
#     run: gcloud --quiet auth configure-docker
#   - name: Set MODEL_VERSION env
#     run: echo "MODEL_VERSION=$(grep 'GO_BP.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#   - name: Set model-specific environment variables
#     run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
#   - name: Build Docker Image
#     run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
#   - name: Publish Docker Image to Google Container Registry
#     run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"

# # GO_CC
# build-and-publish-crf-model-craft-go_cc:
#   runs-on: ubuntu-latest
#   # needs: ci
#   # if: needs.check-need-to-build-crf-model-craft-go_cc.outputs.status == 'success'
#   name: Build & publish CRAFT GO_CC CRF model
#   env:
#     ONT: GO_CC
#     IMAGE_NAME: build_crf_model_craft_go_cc
#     DOCKERFILE: build-crf-models/craft.crf.Dockerfile
#     GCE_REGION: us-central1
#   steps:
#     - uses: actions/checkout@v2
#     - name: Set up Cloud SDK
#       uses: google-github-actions/setup-gcloud@master
#       with:
#         project_id: ${{ secrets.GCE_PROJECT }}
#         service_account_key: ${{ secrets.GCE_SA_KEY }}
#         version: '290.0.1'
#     - name: Configure Docker Authentication
#       run: gcloud --quiet auth configure-docker
#     - name: Set MODEL_VERSION env
#       run: echo "MODEL_VERSION=$(grep 'GO_CC.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#     - name: Build Docker Image
#       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
#     - name: Publish Docker Image to Google Container Registry
#       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
#     - name: Submit job to build model to AI-Platform
#       run: |-
#         gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
#           --scale-tier basic --region "$GCE_REGION" \
#           --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" \
#           -- "${ONT}"
#     - name: Monitor the training job
#       run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
      

# build-crf-service-container-craft-go_cc:
# runs-on: ubuntu-latest
# needs: build-and-publish-crf-model-craft-go_cc
# name: Build container to host craft-go_cc CRF service
# env:
#   IMAGE_NAME: crf_service_craft_go_cc
#   ENV_FILE: build-crf-services/craft-go_cc.env
#   DOCKERFILE: build-crf-services/crf-service.Dockerfile
#   GCE_REGION: us-central1
# steps:
#   - uses: actions/checkout@v2
#   - name: Set up Cloud SDK
#     uses: google-github-actions/setup-gcloud@master
#     with:
#       project_id: ${{ secrets.GCE_PROJECT }}
#       service_account_key: ${{ secrets.GCE_SA_KEY }}
#       version: '290.0.1'
#   - name: Configure Docker Authentication
#     run: gcloud --quiet auth configure-docker
#   - name: Set MODEL_VERSION env
#     run: echo "MODEL_VERSION=$(grep 'GO_CC.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#   - name: Set model-specific environment variables
#     run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
#   - name: Build Docker Image
#     run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
#   - name: Publish Docker Image to Google Container Registry
#     run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"

# # GO_MF
# build-and-publish-crf-model-craft-go_mf:
#   runs-on: ubuntu-latest
#   # needs: ci
#   # if: needs.check-need-to-build-crf-model-craft-go_mf.outputs.status == 'success'
#   name: Build & publish CRAFT GO_MF CRF model
#   env:
#     ONT: GO_MF
#     IMAGE_NAME: build_crf_model_craft_go_mf
#     DOCKERFILE: build-crf-models/craft.crf.Dockerfile
#     GCE_REGION: us-central1
#   steps:
#     - uses: actions/checkout@v2
#     - name: Set up Cloud SDK
#       uses: google-github-actions/setup-gcloud@master
#       with:
#         project_id: ${{ secrets.GCE_PROJECT }}
#         service_account_key: ${{ secrets.GCE_SA_KEY }}
#         version: '290.0.1'
#     - name: Configure Docker Authentication
#       run: gcloud --quiet auth configure-docker
#     - name: Set MODEL_VERSION env
#       run: echo "MODEL_VERSION=$(grep 'GO_MF.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#     - name: Build Docker Image
#       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
#     - name: Publish Docker Image to Google Container Registry
#       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
#     - name: Submit job to build model to AI-Platform
#       run: |-
#         gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
#           --scale-tier basic --region "$GCE_REGION" \
#           --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" \
#           -- "${ONT}"
#     - name: Monitor the training job
#       run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
      

# build-crf-service-container-craft-go_mf:
# runs-on: ubuntu-latest
# needs: build-and-publish-crf-model-craft-go_mf
# name: Build container to host craft-go_mf CRF service
# env:
#   IMAGE_NAME: crf_service_craft_go_mf
#   ENV_FILE: build-crf-services/craft-go_mf.env
#   DOCKERFILE: build-crf-services/crf-service.Dockerfile
#   GCE_REGION: us-central1
# steps:
#   - uses: actions/checkout@v2
#   - name: Set up Cloud SDK
#     uses: google-github-actions/setup-gcloud@master
#     with:
#       project_id: ${{ secrets.GCE_PROJECT }}
#       service_account_key: ${{ secrets.GCE_SA_KEY }}
#       version: '290.0.1'
#   - name: Configure Docker Authentication
#     run: gcloud --quiet auth configure-docker
#   - name: Set MODEL_VERSION env
#     run: echo "MODEL_VERSION=$(grep 'GO_MF.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#   - name: Set model-specific environment variables
#     run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
#   - name: Build Docker Image
#     run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
#   - name: Publish Docker Image to Google Container Registry
#     run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"

# # MOP
# build-and-publish-crf-model-craft-mop:
#   runs-on: ubuntu-latest
#   # needs: ci
#   # if: needs.check-need-to-build-crf-model-craft-mop.outputs.status == 'success'
#   name: Build & publish CRAFT MOP CRF model
#   env:
#     ONT: MOP
#     IMAGE_NAME: build_crf_model_craft_mop
#     DOCKERFILE: build-crf-models/craft.crf.Dockerfile
#     GCE_REGION: us-central1
#   steps:
#     - uses: actions/checkout@v2
#     - name: Set up Cloud SDK
#       uses: google-github-actions/setup-gcloud@master
#       with:
#         project_id: ${{ secrets.GCE_PROJECT }}
#         service_account_key: ${{ secrets.GCE_SA_KEY }}
#         version: '290.0.1'
#     - name: Configure Docker Authentication
#       run: gcloud --quiet auth configure-docker
#     - name: Set MODEL_VERSION env
#       run: echo "MODEL_VERSION=$(grep 'MOP.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#     - name: Build Docker Image
#       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
#     - name: Publish Docker Image to Google Container Registry
#       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
#     - name: Submit job to build model to AI-Platform
#       run: |-
#         gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
#           --scale-tier basic --region "$GCE_REGION" \
#           --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" \
#           -- "${ONT}"
#     - name: Monitor the training job
#       run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
      

# build-crf-service-container-craft-mop:
# runs-on: ubuntu-latest
# needs: build-and-publish-crf-model-craft-mop
# name: Build container to host craft-mop CRF service
# env:
#   IMAGE_NAME: crf_service_craft_mop
#   ENV_FILE: build-crf-services/craft-mop.env
#   DOCKERFILE: build-crf-services/crf-service.Dockerfile
#   GCE_REGION: us-central1
# steps:
#   - uses: actions/checkout@v2
#   - name: Set up Cloud SDK
#     uses: google-github-actions/setup-gcloud@master
#     with:
#       project_id: ${{ secrets.GCE_PROJECT }}
#       service_account_key: ${{ secrets.GCE_SA_KEY }}
#       version: '290.0.1'
#   - name: Configure Docker Authentication
#     run: gcloud --quiet auth configure-docker
#   - name: Set MODEL_VERSION env
#     run: echo "MODEL_VERSION=$(grep 'MOP.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#   - name: Set model-specific environment variables
#     run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
#   - name: Build Docker Image
#     run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
#   - name: Publish Docker Image to Google Container Registry
#     run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"

# # NCBITaxon
# build-and-publish-crf-model-craft-ncbitaxon:
#   runs-on: ubuntu-latest
#   # needs: ci
#   # if: needs.check-need-to-build-crf-model-craft-ncbitaxon.outputs.status == 'success'
#   name: Build & publish CRAFT NCBITAXON CRF model
#   env:
#     ONT: NCBITAXON
#     IMAGE_NAME: build_crf_model_craft_ncbitaxon
#     DOCKERFILE: build-crf-models/craft.crf.Dockerfile
#     GCE_REGION: us-central1
#   steps:
#     - uses: actions/checkout@v2
#     - name: Set up Cloud SDK
#       uses: google-github-actions/setup-gcloud@master
#       with:
#         project_id: ${{ secrets.GCE_PROJECT }}
#         service_account_key: ${{ secrets.GCE_SA_KEY }}
#         version: '290.0.1'
#     - name: Configure Docker Authentication
#       run: gcloud --quiet auth configure-docker
#     - name: Set MODEL_VERSION env
#       run: echo "MODEL_VERSION=$(grep 'NCBITAXON.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#     - name: Build Docker Image
#       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
#     - name: Publish Docker Image to Google Container Registry
#       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
#     - name: Submit job to build model to AI-Platform
#       run: |-
#         gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
#           --scale-tier basic --region "$GCE_REGION" \
#           --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" \
#           -- "${ONT}"
#     - name: Monitor the training job
#       run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
      

# build-crf-service-container-craft-ncbitaxon:
# runs-on: ubuntu-latest
# needs: build-and-publish-crf-model-craft-ncbitaxon
# name: Build container to host craft-ncbitaxon CRF service
# env:
#   IMAGE_NAME: crf_service_craft_ncbitaxon
#   ENV_FILE: build-crf-services/craft-ncbitaxon.env
#   DOCKERFILE: build-crf-services/crf-service.Dockerfile
#   GCE_REGION: us-central1
# steps:
#   - uses: actions/checkout@v2
#   - name: Set up Cloud SDK
#     uses: google-github-actions/setup-gcloud@master
#     with:
#       project_id: ${{ secrets.GCE_PROJECT }}
#       service_account_key: ${{ secrets.GCE_SA_KEY }}
#       version: '290.0.1'
#   - name: Configure Docker Authentication
#     run: gcloud --quiet auth configure-docker
#   - name: Set MODEL_VERSION env
#     run: echo "MODEL_VERSION=$(grep 'NCBITAXON.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#   - name: Set model-specific environment variables
#     run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
#   - name: Build Docker Image
#     run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
#   - name: Publish Docker Image to Google Container Registry
#     run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"

# # PR
# build-and-publish-crf-model-craft-pr:
#   runs-on: ubuntu-latest
#   # needs: ci
#   # if: needs.check-need-to-build-crf-model-craft-pr.outputs.status == 'success'
#   name: Build & publish CRAFT PR CRF model
#   env:
#     ONT: PR
#     IMAGE_NAME: build_crf_model_craft_pr
#     DOCKERFILE: build-crf-models/craft.crf.Dockerfile
#     GCE_REGION: us-central1
#   steps:
#     - uses: actions/checkout@v2
#     - name: Set up Cloud SDK
#       uses: google-github-actions/setup-gcloud@master
#       with:
#         project_id: ${{ secrets.GCE_PROJECT }}
#         service_account_key: ${{ secrets.GCE_SA_KEY }}
#         version: '290.0.1'
#     - name: Configure Docker Authentication
#       run: gcloud --quiet auth configure-docker
#     - name: Set MODEL_VERSION env
#       run: echo "MODEL_VERSION=$(grep 'PR.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#     - name: Build Docker Image
#       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
#     - name: Publish Docker Image to Google Container Registry
#       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
#     - name: Submit job to build model to AI-Platform
#       run: |-
#         gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
#           --scale-tier basic --region "$GCE_REGION" \
#           --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" \
#           -- "${ONT}"
#     - name: Monitor the training job
#       run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
      

# build-crf-service-container-craft-pr:
# runs-on: ubuntu-latest
# needs: build-and-publish-crf-model-craft-pr
# name: Build container to host craft-pr CRF service
# env:
#   IMAGE_NAME: crf_service_craft_pr
#   ENV_FILE: build-crf-services/craft-pr.env
#   DOCKERFILE: build-crf-services/crf-service.Dockerfile
#   GCE_REGION: us-central1
# steps:
#   - uses: actions/checkout@v2
#   - name: Set up Cloud SDK
#     uses: google-github-actions/setup-gcloud@master
#     with:
#       project_id: ${{ secrets.GCE_PROJECT }}
#       service_account_key: ${{ secrets.GCE_SA_KEY }}
#       version: '290.0.1'
#   - name: Configure Docker Authentication
#     run: gcloud --quiet auth configure-docker
#   - name: Set MODEL_VERSION env
#     run: echo "MODEL_VERSION=$(grep 'PR.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#   - name: Set model-specific environment variables
#     run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
#   - name: Build Docker Image
#     run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
#   - name: Publish Docker Image to Google Container Registry
#     run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"

# # SO
# build-and-publish-crf-model-craft-so:
#   runs-on: ubuntu-latest
#   # needs: ci
#   # if: needs.check-need-to-build-crf-model-craft-so.outputs.status == 'success'
#   name: Build & publish CRAFT SO CRF model
#   env:
#     ONT: SO
#     IMAGE_NAME: build_crf_model_craft_so
#     DOCKERFILE: build-crf-models/craft.crf.Dockerfile
#     GCE_REGION: us-central1
#   steps:
#     - uses: actions/checkout@v2
#     - name: Set up Cloud SDK
#       uses: google-github-actions/setup-gcloud@master
#       with:
#         project_id: ${{ secrets.GCE_PROJECT }}
#         service_account_key: ${{ secrets.GCE_SA_KEY }}
#         version: '290.0.1'
#     - name: Configure Docker Authentication
#       run: gcloud --quiet auth configure-docker
#     - name: Set MODEL_VERSION env
#       run: echo "MODEL_VERSION=$(grep 'SO.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#     - name: Build Docker Image
#       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
#     - name: Publish Docker Image to Google Container Registry
#       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
#     - name: Submit job to build model to AI-Platform
#       run: |-
#         gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
#           --scale-tier basic --region "$GCE_REGION" \
#           --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" \
#           -- "${ONT}"
#     - name: Monitor the training job
#       run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
      

# build-crf-service-container-craft-so:
# runs-on: ubuntu-latest
# needs: build-and-publish-crf-model-craft-so
# name: Build container to host craft-so CRF service
# env:
#   IMAGE_NAME: crf_service_craft_so
#   ENV_FILE: build-crf-services/craft-so.env
#   DOCKERFILE: build-crf-services/crf-service.Dockerfile
#   GCE_REGION: us-central1
# steps:
#   - uses: actions/checkout@v2
#   - name: Set up Cloud SDK
#     uses: google-github-actions/setup-gcloud@master
#     with:
#       project_id: ${{ secrets.GCE_PROJECT }}
#       service_account_key: ${{ secrets.GCE_SA_KEY }}
#       version: '290.0.1'
#   - name: Configure Docker Authentication
#     run: gcloud --quiet auth configure-docker
#   - name: Set MODEL_VERSION env
#     run: echo "MODEL_VERSION=$(grep 'SO.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#   - name: Set model-specific environment variables
#     run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
#   - name: Build Docker Image
#     run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
#   - name: Publish Docker Image to Google Container Registry
#     run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"

# # UBERON
# build-and-publish-crf-model-craft-uberon:
#   runs-on: ubuntu-latest
#   # needs: ci
#   # if: needs.check-need-to-build-crf-model-craft-uberon.outputs.status == 'success'
#   name: Build & publish CRAFT UBERON CRF model
#   env:
#     ONT: UBERON
#     IMAGE_NAME: build_crf_model_craft_uberon
#     DOCKERFILE: build-crf-models/craft.crf.Dockerfile
#     GCE_REGION: us-central1
#   steps:
#     - uses: actions/checkout@v2
#     - name: Set up Cloud SDK
#       uses: google-github-actions/setup-gcloud@master
#       with:
#         project_id: ${{ secrets.GCE_PROJECT }}
#         service_account_key: ${{ secrets.GCE_SA_KEY }}
#         version: '290.0.1'
#     - name: Configure Docker Authentication
#       run: gcloud --quiet auth configure-docker
#     - name: Set MODEL_VERSION env
#       run: echo "MODEL_VERSION=$(grep 'UBERON.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#     - name: Build Docker Image
#       run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" .
#     - name: Publish Docker Image to Google Container Registry
#       run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"
#     - name: Submit job to build model to AI-Platform
#       run: |-
#         gcloud ai-platform jobs submit training "$IMAGE_NAME_$GITHUB_SHA" \
#           --scale-tier basic --region "$GCE_REGION" \
#           --master-image-uri "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" \
#           -- "${ONT}"
#     - name: Monitor the training job
#       run: sh -c ".github/workflows/monitor-ai-platform-job.sh $IMAGE_NAME_$GITHUB_SHA"
      

# build-crf-service-container-craft-uberon:
# runs-on: ubuntu-latest
# needs: build-and-publish-crf-model-craft-uberon
# name: Build container to host craft-uberon CRF service
# env:
#   IMAGE_NAME: crf_service_craft_uberon
#   ENV_FILE: build-crf-services/craft-uberon.env
#   DOCKERFILE: build-crf-services/crf-service.Dockerfile
#   GCE_REGION: us-central1
# steps:
#   - uses: actions/checkout@v2
#   - name: Set up Cloud SDK
#     uses: google-github-actions/setup-gcloud@master
#     with:
#       project_id: ${{ secrets.GCE_PROJECT }}
#       service_account_key: ${{ secrets.GCE_SA_KEY }}
#       version: '290.0.1'
#   - name: Configure Docker Authentication
#     run: gcloud --quiet auth configure-docker
#   - name: Set MODEL_VERSION env
#     run: echo "MODEL_VERSION=$(grep 'UBERON.CRAFT' MODEL_VERSIONS | cut -f 2 -d '=')" >> $GITHUB_ENV
#   - name: Set model-specific environment variables
#     run: while read line; do echo "$line" >> $GITHUB_ENV ; done < ${ENV_FILE}
#   - name: Build Docker Image
#     run: docker build --tag "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION" -f "$DOCKERFILE" --build-arg MODEL_KEY_ARG=$MODEL_KEY --build-arg MODEL_FILE_PREFIX_ARG=$PROJECT_ID$MODEL_FILE_PREFIX --build-arg MODEL_VERSION_ARG=$MODEL_VERSION .
#   - name: Publish Docker Image to Google Container Registry
#     run: docker push "gcr.io/$PROJECT_ID/$IMAGE_NAME:$MODEL_VERSION"



               